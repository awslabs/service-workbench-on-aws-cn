/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Optional } from 'utility-types';
import type { DocMetadataBase, VersionMetadata, NumberPrefixParser, SidebarOptions } from '../types';
declare type Expand<T extends Record<string, unknown>> = {
    [P in keyof T]: T[P];
};
export declare type SidebarItemBase = {
    className?: string;
    customProps?: Record<string, unknown>;
};
export declare type SidebarItemDoc = SidebarItemBase & {
    type: 'doc' | 'ref';
    label?: string;
    id: string;
};
export declare type SidebarItemLink = SidebarItemBase & {
    type: 'link';
    href: string;
    label: string;
};
export declare type SidebarItemAutogenerated = SidebarItemBase & {
    type: 'autogenerated';
    dirName: string;
};
declare type SidebarItemCategoryBase = SidebarItemBase & {
    type: 'category';
    label: string;
    collapsed: boolean;
    collapsible: boolean;
};
export declare type SidebarItemCategoryConfig = Expand<Optional<SidebarItemCategoryBase, 'collapsed' | 'collapsible'> & {
    items: SidebarItemConfig[];
}>;
export declare type SidebarCategoriesShorthand = {
    [sidebarCategory: string]: SidebarItemConfig[];
};
export declare function isCategoriesShorthand(item: SidebarItemConfig): item is SidebarCategoriesShorthand;
export declare type SidebarItemConfig = SidebarItemDoc | SidebarItemLink | SidebarItemAutogenerated | SidebarItemCategoryConfig | string | SidebarCategoriesShorthand;
export declare type SidebarConfig = SidebarCategoriesShorthand | SidebarItemConfig[];
export declare type SidebarsConfig = {
    [sidebarId: string]: SidebarConfig;
};
export declare type NormalizedSidebarItemCategory = Expand<SidebarItemCategoryBase & {
    items: NormalizedSidebarItem[];
}>;
export declare type NormalizedSidebarItem = SidebarItemDoc | SidebarItemLink | NormalizedSidebarItemCategory | SidebarItemAutogenerated;
export declare type NormalizedSidebar = NormalizedSidebarItem[];
export declare type NormalizedSidebars = {
    [sidebarId: string]: NormalizedSidebar;
};
export declare type SidebarItemCategory = Expand<SidebarItemCategoryBase & {
    items: SidebarItem[];
}>;
export declare type SidebarItem = SidebarItemDoc | SidebarItemLink | SidebarItemCategory;
export declare type Sidebar = SidebarItem[];
export declare type SidebarItemType = SidebarItem['type'];
export declare type Sidebars = {
    [sidebarId: string]: Sidebar;
};
export declare type PropSidebarItemCategory = Expand<SidebarItemCategoryBase & {
    items: PropSidebarItem[];
}>;
export declare type PropSidebarItem = SidebarItemLink | PropSidebarItemCategory;
export declare type PropSidebar = PropSidebarItem[];
export declare type PropSidebars = {
    [sidebarId: string]: PropSidebar;
};
export declare type SidebarItemsGeneratorDoc = Pick<DocMetadataBase, 'id' | 'frontMatter' | 'source' | 'sourceDirName' | 'sidebarPosition'>;
export declare type SidebarItemsGeneratorVersion = Pick<VersionMetadata, 'versionName' | 'contentPath'>;
export declare type SidebarItemsGeneratorArgs = {
    item: SidebarItemAutogenerated;
    version: SidebarItemsGeneratorVersion;
    docs: SidebarItemsGeneratorDoc[];
    numberPrefixParser: NumberPrefixParser;
    options: SidebarOptions;
};
export declare type SidebarItemsGenerator = (generatorArgs: SidebarItemsGeneratorArgs) => Promise<SidebarItem[]>;
export declare type SidebarItemsGeneratorOptionArgs = {
    defaultSidebarItemsGenerator: SidebarItemsGenerator;
} & SidebarItemsGeneratorArgs;
export declare type SidebarItemsGeneratorOption = (generatorArgs: SidebarItemsGeneratorOptionArgs) => Promise<SidebarItem[]>;
export {};
