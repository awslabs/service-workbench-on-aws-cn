"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _index = _interopRequireDefault(require("../index"));

var _TabItem = _interopRequireDefault(require("../../TabItem"));

var _UserPreferencesProvider = _interopRequireDefault(require("@theme/UserPreferencesProvider"));

var _themeCommon = require("@docusaurus/theme-common");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
describe('Tabs', () => {
  test('Should reject bad Tabs child', () => {
    expect(() => {
      _reactTestRenderer.default.create(<_index.default>
          <div>Naughty</div>
          <_TabItem.default value="good">Good</_TabItem.default>
        </_index.default>);
    }).toThrowErrorMatchingInlineSnapshot(`"Docusaurus error: Bad <Tabs> child <div>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique \\"value\\" prop."`);
  });
  test('Should reject bad Tabs defaultValue', () => {
    expect(() => {
      _reactTestRenderer.default.create(<_index.default defaultValue="bad">
          <_TabItem.default value="v1">Tab 1</_TabItem.default>
          <_TabItem.default value="v2">Tab 2</_TabItem.default>
        </_index.default>);
    }).toThrowErrorMatchingInlineSnapshot(`"Docusaurus error: The <Tabs> has a defaultValue \\"bad\\" but none of its children has the corresponding value. Available values are: v1, v2. If you intend to show no default tab, use defaultValue={null} instead."`);
  });
  test('Should reject duplicate values', () => {
    expect(() => {
      _reactTestRenderer.default.create(<_index.default>
          <_TabItem.default value="v1">Tab 1</_TabItem.default>
          <_TabItem.default value="v2">Tab 2</_TabItem.default>
          <_TabItem.default value="v3">Tab 3</_TabItem.default>
          <_TabItem.default value="v4">Tab 4</_TabItem.default>
          <_TabItem.default value="v1">Tab 5</_TabItem.default>
          <_TabItem.default value="v2">Tab 6</_TabItem.default>
        </_index.default>);
    }).toThrowErrorMatchingInlineSnapshot(`"Docusaurus error: Duplicate values \\"v1, v2\\" found in <Tabs>. Every value needs to be unique."`);
  });
  test('Should accept valid Tabs config', () => {
    expect(() => {
      _reactTestRenderer.default.create(<_themeCommon.ScrollControllerProvider>
          <_UserPreferencesProvider.default>
            <_index.default>
              <_TabItem.default value="v1">Tab 1</_TabItem.default>
              <_TabItem.default value="v2">Tab 2</_TabItem.default>
            </_index.default>
            <_index.default>
              <_TabItem.default value="v1">Tab 1</_TabItem.default>
              <_TabItem.default value="v2" default>
                Tab 2
              </_TabItem.default>
            </_index.default>
            <_index.default defaultValue="v1">
              <_TabItem.default value="v1" label="V1">
                Tab 1
              </_TabItem.default>
              <_TabItem.default value="v2" label="V2">
                Tab 2
              </_TabItem.default>
            </_index.default>
            <_index.default defaultValue="v1" values={[{
            value: 'v1',
            label: 'V1'
          }, {
            value: 'v2',
            label: 'V2'
          }]}>
              <_TabItem.default value="v1">Tab 1</_TabItem.default>
              <_TabItem.default value="v2">Tab 2</_TabItem.default>
            </_index.default>
            <_index.default defaultValue={null} values={[{
            value: 'v1',
            label: 'V1'
          }, {
            value: 'v2',
            label: 'V2'
          }]}>
              <_TabItem.default value="v1">Tab 1</_TabItem.default>
              <_TabItem.default value="v2">Tab 2</_TabItem.default>
            </_index.default>
            <_index.default defaultValue={null}>
              <_TabItem.default value="v1" label="V1">
                Tab 1
              </_TabItem.default>
              <_TabItem.default value="v2" label="V2">
                Tab 2
              </_TabItem.default>
            </_index.default>
          </_UserPreferencesProvider.default>
        </_themeCommon.ScrollControllerProvider>);
    }).not.toThrow(); // TODO Better Jest infrastructure to mock the Layout
  }); // https://github.com/facebook/docusaurus/issues/5729

  test('Should accept dynamic Tabs with number values', () => {
    expect(() => {
      const tabs = ['Apple', 'Banana', 'Carrot'];

      _reactTestRenderer.default.create(<_themeCommon.ScrollControllerProvider>
          <_UserPreferencesProvider.default>
            <_index.default values={tabs.map((t, idx) => ({
            label: t,
            value: idx
          }))} defaultValue={0}>
              {tabs.map((t, idx) => <_TabItem.default value={idx}>{t}</_TabItem.default>)}
            </_index.default>
          </_UserPreferencesProvider.default>
        </_themeCommon.ScrollControllerProvider>);
    }).not.toThrow();
  });
});