"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _themeCommon = require("@docusaurus/theme-common");

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const useHideableNavbar = hideOnScroll => {
  const [isNavbarVisible, setIsNavbarVisible] = (0, _react.useState)(hideOnScroll);
  const isFocusedAnchor = (0, _react.useRef)(false);
  const navbarHeight = (0, _react.useRef)(0);
  const navbarRef = (0, _react.useCallback)(node => {
    if (node !== null) {
      navbarHeight.current = node.getBoundingClientRect().height;
    }
  }, []);
  (0, _themeCommon.useScrollPosition)((currentPosition, lastPosition) => {
    if (!hideOnScroll) {
      return;
    }

    const scrollTop = currentPosition.scrollY; // It needed for mostly to handle rubber band scrolling

    if (scrollTop < navbarHeight.current) {
      setIsNavbarVisible(true);
      return;
    }

    if (isFocusedAnchor.current) {
      isFocusedAnchor.current = false;
      return;
    }

    const lastScrollTop = lastPosition === null || lastPosition === void 0 ? void 0 : lastPosition.scrollY;
    const documentHeight = document.documentElement.scrollHeight - navbarHeight.current;
    const windowHeight = window.innerHeight;

    if (lastScrollTop && scrollTop >= lastScrollTop) {
      setIsNavbarVisible(false);
    } else if (scrollTop + windowHeight < documentHeight) {
      setIsNavbarVisible(true);
    }
  });
  (0, _themeCommon.useLocationChange)(locationChangeEvent => {
    if (!hideOnScroll) {
      return;
    }

    if (locationChangeEvent.location.hash) {
      isFocusedAnchor.current = true;
      setIsNavbarVisible(false);
      return;
    }

    setIsNavbarVisible(true);
  });
  return {
    navbarRef,
    isNavbarVisible
  };
};

var _default = useHideableNavbar;
exports.default = _default;