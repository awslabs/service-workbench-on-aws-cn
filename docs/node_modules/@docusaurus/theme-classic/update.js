const chalk = require('chalk');
const path = require('path');
const fs = require('fs-extra');
const globby = require('globby');
const {mapValues, pickBy, difference, orderBy} = require('lodash');

async function extractThemeCodeMessages(dirPath) {
  // Unsafe import, should we create a package for the translationsExtractor ?
  const {
    globSourceCodeFilePaths,
    extractAllSourceCodeFileTranslations,
    // eslint-disable-next-line global-require
  } = require('@docusaurus/core/lib/server/translations/translationsExtractor');

  const filePaths = (await globSourceCodeFilePaths([dirPath])).filter(
    (filePath) => ['.js', '.jsx'].includes(path.extname(filePath)),
  );

  const filesExtractedTranslations = await extractAllSourceCodeFileTranslations(
    filePaths,
    {
      presets: [require.resolve('@docusaurus/core/lib/babel/preset')],
    },
  );

  filesExtractedTranslations.forEach((fileExtractedTranslations) => {
    fileExtractedTranslations.warnings.forEach((warning) => {
      throw new Error(`
Please make sure all theme translations are static!
Some warnings were found!

${warning}
      `);
    });
  });

  const translations = filesExtractedTranslations.reduce(
    (acc, extractedTranslations) => {
      return {...acc, ...extractedTranslations.translations};
    },
    {},
  );

  return translations;
}

function sortObjectKeys(obj) {
  let keys = Object.keys(obj);
  // keys = orderBy(keys, [(k) => removeDescriptionSuffix(k)]);
  return keys.reduce((acc, key) => {
    acc[key] = obj[key];
    return acc;
  }, {});
}

async function writeMessagesFile(filePath, messages) {
  const sortedMessages = sortObjectKeys(messages);
  const content = `${JSON.stringify(sortedMessages, null, 2)}\n`; // \n makes prettier happy
  await fs.outputFile(filePath, content);
}

async function main() {
  const codeTranslationsDir = path.join(__dirname, 'src', 'codeTranslations');
  const baseFile = path.join(codeTranslationsDir, 'base.json');
  const localesFiles = (await globby(codeTranslationsDir)).filter(
    (filepath) => path.extname(filepath) === '.json',
    // (filepath) => filepath.endsWith('base.json'),
  );
  let baseMessages = JSON.parse(await fs.readFile(baseFile));

  const targetDirs = [
    path.join(
      __dirname,
      '..',
      'docusaurus-theme-search-algolia',
      'src',
      // 'theme',
    ),
    path.join(
      __dirname,
      '..',
      'docusaurus-theme-live-codeblock',
      'src',
      // 'theme',
    ),
    path.join(__dirname, '..', 'docusaurus-plugin-pwa', 'src'),
  ];

  const convertToObject = (array) =>
    array.reduce((acc, [key, value]) => {
      return {...acc, ...{[key]: value}};
    }, {});

  const removePluginMessages = (content, keys) =>
    Object.entries(content).filter(([key]) => !keys.includes(key));

  for (const targetDir of targetDirs) {
    console.log(targetDir);

    const pluginExtractedTranslations = await extractThemeCodeMessages(
      targetDir,
    );

    for (const localeFile of localesFiles) {
      console.log(localeFile);

      const targetFile = JSON.parse(await fs.readFile(localeFile));
      const destFile = path.join(
        targetDir,
        'codeTranslations',
        path.basename(localeFile),
      );

      const pluginMessages = Object.entries(targetFile).filter(
        ([key, value]) => {
          return Object.keys(pluginExtractedTranslations).filter((message) =>
            key.startsWith(message),
          ).length;
        },
      );

      const pluginMessagesKeys = pluginMessages.map(([key]) => key);

      console.log(1, pluginMessagesKeys);

      // await writeMessagesFile(destFile, convertToObject(pluginMessages));

      const newTargetFile = removePluginMessages(
        targetFile,
        pluginMessagesKeys,
      );

      baseMessages = pickBy(
        baseMessages,
        (_, key) => !pluginMessagesKeys.includes(key),
      );
      // await writeMessagesFile(localeFile, convertToObject(newTargetFile));
    }
  }

  // console.log(baseMessages);
  // await writeMessagesFile(baseFile, baseMessages);
}

function run() {
  main().then(() => {
    console.log(1);
  });
}

exports.run = run;
