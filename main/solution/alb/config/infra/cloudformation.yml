Parameters:
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Default: ${self:custom.settings.albSubnetIdList}

Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      Subnets: !Ref Subnets
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
      - Id: ${self:custom.settings.lambdaWebsiteFunctionArn}

  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: ${self:custom.settings.albPort}
      Protocol: HTTP

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: ${self:custom.settings.albVpcId}
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: ${self:custom.settings.albPort}
        ToPort: ${self:custom.settings.albPort}
        CidrIp: 0.0.0.0/0

  WebsiteLambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: ${self:custom.settings.lambdaWebsiteFunctionArn}
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

Outputs:
  LoadBalancerDNSNAme:
    Value: !GetAtt LoadBalancer.DNSName
  LoadBalancerArn:
    Value: !Ref LoadBalancer
  